{
    "version": "https://jsonfeed.org/version/1",
    "title": "Entero Positivo",
    "description": "",
    "home_page_url": "https://enteropositivo.github.io",
    "feed_url": "https://enteropositivo.github.io/feed.json",
    "user_comment": "",
    "icon": "https://enteropositivo.github.io/media/website/avatar.png",
    "author": {
        "name": "Entero Positivo"
    },
    "items": [
        {
            "id": "https://enteropositivo.github.io/diseno-de-un-lenguaje-de-programacion-de-robots-eplang/",
            "url": "https://enteropositivo.github.io/diseno-de-un-lenguaje-de-programacion-de-robots-eplang/",
            "title": "Diseño de un lenguaje de programación  de robots EPLang",
            "summary": "Descripción del proyecto Este proyecto lo creé en el año 1999.&nbsp; La idea era crear un lenguaje de programación para poder accionar robots o periféricos&hellip;",
            "content_html": "\n    <h2 id=\"descripcin-del-proyecto\">\n      Descripción del proyecto\n    </h2>\n\n  <p>\n    Este proyecto lo creé en el <strong>año 1999</strong>.&nbsp; <br><br>La idea era crear un lenguaje de programación para poder accionar robots o periféricos conectados en el puerto paralelo del ordenador, pudiendo controlar 8 salidas de una forma sencilla y teniendo a disposición las 8 entradas del puerto.&nbsp;\n  </p>\n\n  <p>\n    Por aquella época todavía no existía Arduino y necesitaba poder programar dispositivos electrónicos o mini-autómatas de una forma sencilla y por ese motivo <strong>creé el lenguaje EPLang con su entorno de desarrollo</strong>.<br><br><br>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/13/ejemplo_0.gif\" height=\"660\" width=\"650\" alt=\"\" />\n      \n    </figure>\n\n    <h2 id=\"partes-del-proyecto\">\n      Partes del proyecto\n    </h2>\n\n  <ul>\n    <li>Diseño del léxico y parser de un lenguaje de programación fácil de comprender&nbsp;</li><li>Creación de un entorno de desarrollo donde poder escribir dicho lenguaje</li><li>Intérprete visual de la ejecución del lenguaje escrito.</li><li>Creación de una librería .dll en c++ para poder ejecutar el mismo código en un entorno real a través del puerto paralelo del ordenador.</li>\n  </ul>\n\n  <p>\n    Tanto el entorno de desarrollo como el lenguaje de programación están realizados en <strong>Visual Basic 6</strong>\n  </p>\n\n  <p>\n    La librería .dll que ejecutaba en tiempo real el programa en el puerto paralelo del PC la hice en <strong>Visual C++</strong>\n  </p>\n\n  <p>\n    \n  </p>\n\n    <h2 id=\"algunos-ejemplos-de-cdigo\">\n      Algunos ejemplos de código\n    </h2>\n\n  <p>\n    A continuación muestro algunos ejemplos de código que resumen de lo que se podía hacer en este lenguaje\n  </p>\n\n    <h3 id=\"ejemplo-blink-sencillo-en-2-lneas-de-salida\">\n      Ejemplo blink sencillo en 2 líneas de salida\n    </h3>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/13/codigo1.PNG\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/13/responsive/codigo1-xs.PNG 300w ,https://enteropositivo.github.io/media/posts/13/responsive/codigo1-sm.PNG 480w ,https://enteropositivo.github.io/media/posts/13/responsive/codigo1-md.PNG 768w\"  height=\"440\" width=\"616\" alt=\"\" />\n      \n    </figure>\n\n    <h3 id=\"ejemplo-de-blink-usando-timers-y-eventos-de-entradabr\">\n      Ejemplo de blink usando Timers y eventos de entrada<br>\n    </h3>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/13/codigo2.PNG\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/13/responsive/codigo2-xs.PNG 300w ,https://enteropositivo.github.io/media/posts/13/responsive/codigo2-sm.PNG 480w ,https://enteropositivo.github.io/media/posts/13/responsive/codigo2-md.PNG 768w\"  height=\"498\" width=\"592\" alt=\"\" />\n      \n    </figure>\n\n    <h3 id=\"bucles-y-condicionales\">\n      Bucles y condicionales\n    </h3>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/13/codigo3.PNG\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/13/responsive/codigo3-xs.PNG 300w ,https://enteropositivo.github.io/media/posts/13/responsive/codigo3-sm.PNG 480w ,https://enteropositivo.github.io/media/posts/13/responsive/codigo3-md.PNG 768w\"  height=\"432\" width=\"519\" alt=\"\" />\n      \n    </figure>\n\n    <h3 id=\"multitarea\">\n      Multitarea\n    </h3>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/13/codigo4.PNG\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/13/responsive/codigo4-xs.PNG 300w ,https://enteropositivo.github.io/media/posts/13/responsive/codigo4-sm.PNG 480w ,https://enteropositivo.github.io/media/posts/13/responsive/codigo4-md.PNG 768w\"  height=\"716\" width=\"483\" alt=\"\" />\n      \n    </figure>",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
                   "visual basic",
                   "mis trabajos",
                   "C/C++"
            ],
            "date_published": "2023-02-24T20:12:07+01:00",
            "date_modified": "2023-02-26T09:54:52+01:00"
        },
        {
            "id": "https://enteropositivo.github.io/daplink-bootloader-en-st-link/",
            "url": "https://enteropositivo.github.io/daplink-bootloader-en-st-link/",
            "title": "DAPLink bootloader en ST-LINK",
            "summary": "Descripción&nbsp; Si tenemos un depurados/grabador&nbsp; ST-LINK/&nbsp; V1-V2&nbsp; o un clon,&nbsp; podemos convertirlo en un depurador tipo DAPLink,&nbsp; para usarlo con cualquier tipo de placas cuyo&hellip;",
            "content_html": "\n    <h2 id=\"descripcinnbsp\">\n      Descripción&nbsp;\n    </h2>\n\n  <p>\n    Si tenemos un depurados/grabador&nbsp; <strong>ST-LINK</strong>/&nbsp; V1-V2&nbsp; o un clon,&nbsp; podemos convertirlo en un depurador tipo <strong>DAPLink</strong>,&nbsp; para usarlo con cualquier tipo de placas cuyo entorno de desarrollo soporte el protocolo&nbsp;<strong>CMSIS-DAP</strong>\n  </p>\n\n  <p>\n    En mi caso lo utilizo para poder programa y depurar placas <strong>Raspberry Pi Zero</strong> usando <strong>Rust </strong>como lenguaje de programación y probe-run como herramienta de depuración\n  </p>\n\n    <h2 id=\"pasosnbsp\">\n      Pasos&nbsp;\n    </h2>\n\n    <h3 id=\"conectarlo-el-stlink-a-nuestra-placa\">\n      Conectarlo el ST-LINK a nuestra placa\n    </h3>\n\n  <p>\n    En el caso de querer usar una Raspberry Pi pico ya sea para promarla con Rust o con C++ mediante <a href=\"https://raspberrypi.github.io/pico-sdk-doxygen/\" target=\"_blank\">Raspberry Pi Pico SDK</a>,&nbsp; primero tendremos que soldar 3 pines macho al conector <em><strong>debug </strong></em>de la placa\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/12/debug_raspberry_pi_pico.jpg\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/12/responsive/debug_raspberry_pi_pico-xs.jpg 300w ,https://enteropositivo.github.io/media/posts/12/responsive/debug_raspberry_pi_pico-sm.jpg 480w ,https://enteropositivo.github.io/media/posts/12/responsive/debug_raspberry_pi_pico-md.jpg 768w\"  height=\"324\" width=\"648\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Y las conexiones la haremos de la siguiente forma:\n  </p>\n\n  <p>\n    Pico ( SWDIO )&nbsp; ············&nbsp; ST-LINK ( SWDIO - Pin 7)<br>Pico ( SWCLK)&nbsp; ············&nbsp; ST-LINK ( SWCLK - Pin 9)<br>Pico ( GND )&nbsp; &nbsp; &nbsp; ············&nbsp; ST-LINK ( GND - Pin 10 )<br>\n  </p>\n\n    <h2 id=\"grabar-el-firmware-en-stlink\">\n      Grabar el firmware en ST-LINK\n    </h2>\n\n    <blockquote class=\"blockquote\">\n      El siguiente firmware se graba de forma temporal en nuestro ST-LINK y habrá que hacerlo cada vez que lo conectemos al PC,&nbsp; de esta forma cuando desconectemos del USB volverá a tener su firmware original y lo podremos seguir usando con otras placas tipo STM32 .\n    </blockquote>\n\n    <h3 id=\"driver-stlink\">\n      Driver ST-LINK\n    </h3>\n\n  <p>\n    Asegurarse de que tenemos el driver de ST-LINK instalado. Lo sabremos si al conectar el grabador, la luz roja está fija (no parpadea).<br>Si parpadea,<a href=\"https://www.st.com/en/development-tools/stsw-link009.html\" target=\"_blank\"> descargar e instalar el driver desde la web de ST-LINK</a><br>\n  </p>\n\n    <h3 id=\"daplink-bootloader\">\n      DAPLink bootloader\n    </h3>\n\n  <p>\n    <a href=\"https://enteropositivo.github.io/stlinkclone_if.bin\" download>Descargar el bootloader&nbsp;stlinkclone_if.bin&nbsp;</a>&nbsp;que grabaremos en el ST-LINK cada vez que necesitemos usarlo en en modo DAPLink<br><br><em>Código fuente:</em> también puedes compilarlo desde su repositorio de <a href=\"https://github.com/ziutek/DAPLink\" target=\"_blank\">GitHub ziutek/DAPLink</a><br>\n  </p>\n\n    <h3 id=\"grabar-con-stlinktool\">\n      Grabar con stlink-tool\n    </h3>\n\n  <p>\n    <a href=\"https://enteropositivo.github.io/stlink-tool.zip\" download>Descargar stlink-tool.zip</a>&nbsp; &nbsp; &nbsp;\n  </p>\n\n  <p>\n    <em>Código fuente:</em> también puedes compilarlo desde su repositorio <a href=\"https://github.com/UweBonnes/stlink-tool\" target=\"_blank\">GitHub UweBonnes/stlink-tool</a>\n  </p>\n\n  <p>\n    Conecta el ST-LINK al PC mediante USB y graba el bootloader\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>stlink-tool  stlinkclone_if.bin</code></pre>\n\n  <p>\n    Listo !!&nbsp; ya puedes depurar tu placa&nbsp;\n  </p>",
            "image": "https://enteropositivo.github.io/media/posts/12/jtag_sw_to_cmsis-2.jpg",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
                   "rust",
                   "raspberry pi",
                   "Blog"
            ],
            "date_published": "2022-06-27T10:07:51+02:00",
            "date_modified": "2022-06-27T11:51:27+02:00"
        },
        {
            "id": "https://enteropositivo.github.io/sobre-me-about-me/",
            "url": "https://enteropositivo.github.io/sobre-me-about-me/",
            "title": "Contacto",
            "summary": "Contacto Twitter:&nbsp;https://twitter.com/EnteroPositivoGitHub:&nbsp;https://github.com/enteropositivoGists:&nbsp;https://gist.github.com/enteropositivoMedium:&nbsp;https://enteropositivo.medium.comGMail:&nbsp; enteropositivo",
            "content_html": "\n    <h2 id=\"contacto\">\n      Contacto\n    </h2>\n\n  <ul>\n    <li><strong>Twitter:</strong>&nbsp;<a href=\"https://twitter.com/EnteroPositivo\" target=\"_blank\">https://twitter.com/EnteroPositivo</a></li><li><strong>GitHub:</strong>&nbsp;<a href=\"https://github.com/enteropositivo\">https://github.com/enteropositivo</a></li><li><strong>Gists:</strong>&nbsp;<a href=\"https://gist.github.com/enteropositivo\" target=\"_blank\">https://gist.github.com/enteropositivo</a></li><li><strong>Medium:</strong>&nbsp;<a href=\"https://enteropositivo.medium.com\" target=\"_blank\">https://enteropositivo.medium.com</a></li><li><strong>GMail:</strong>&nbsp; enteropositivo</li>\n  </ul>\n\n  <p>\n    \n  </p>",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
            ],
            "date_published": "2022-06-17T13:00:49+02:00",
            "date_modified": "2023-07-25T08:21:09+02:00"
        },
        {
            "id": "https://enteropositivo.github.io/extension-para-mostrar-numeros-hasta-99999-con-microbit/",
            "url": "https://enteropositivo.github.io/extension-para-mostrar-numeros-hasta-99999-con-microbit/",
            "title": "Extensión para mostrar números hasta 99.999 con micro:bit",
            "summary": "Descripción&nbsp; Este sistema lo he creado para poder representar números hasta 99.999 en el display de micro:bit sin necesidad de de que el display tenga&hellip;",
            "content_html": "\n    <h2 id=\"descripcinnbsp\">\n      Descripción&nbsp;\n    </h2>\n\n  <p>\n    Este sistema lo he creado para poder representar números hasta 99.999 en el display de <strong>micro:bit </strong>sin necesidad de de que el display tenga que hacer scroll.\n  </p>\n\n  <p>\n    El sistema se basa en los leds del propio display y es muy fácil de interpretar.\n  </p>\n\n    <h2 id=\"sistema-de-representacin\">\n      Sistema de representación\n    </h2>\n\n    <h3 id=\"unidades-con-dgitos-de-0-a-5\">\n      Unidades con dígitos de 0 a 5\n    </h3>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/10/1.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/10/responsive/1-xs.png 300w ,https://enteropositivo.github.io/media/posts/10/responsive/1-sm.png 480w ,https://enteropositivo.github.io/media/posts/10/responsive/1-md.png 768w\"  height=\"240\" width=\"771\" alt=\"\" />\n      <figcaption>las unidades empiezan por la derecha y se ilumina el led correspondiente al número de 1-5</figcaption>\n    </figure>\n\n    <h3 id=\"decenas-centenas-etcnbspnbsp\">\n      Decenas, centenas etc...&nbsp;&nbsp;\n    </h3>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/10/2.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/10/responsive/2-xs.png 300w ,https://enteropositivo.github.io/media/posts/10/responsive/2-sm.png 480w ,https://enteropositivo.github.io/media/posts/10/responsive/2-md.png 768w\"  height=\"235\" width=\"770\" alt=\"\" />\n      \n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/10/3.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/10/responsive/3-xs.png 300w ,https://enteropositivo.github.io/media/posts/10/responsive/3-sm.png 480w ,https://enteropositivo.github.io/media/posts/10/responsive/3-md.png 768w\"  height=\"234\" width=\"764\" alt=\"\" />\n      <figcaption>Las decenas, centeneas etc...  que contengan números entre 0 y 5 siguen el mismo patrón anterior</figcaption>\n    </figure>\n\n    <h3 id=\"representar-dgitos-mayores-que-5nbsp-69\">\n      Representar dígitos mayores que 5&nbsp; [6-9]\n    </h3>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/10/4.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/10/responsive/4-xs.png 300w ,https://enteropositivo.github.io/media/posts/10/responsive/4-sm.png 480w ,https://enteropositivo.github.io/media/posts/10/responsive/4-md.png 768w\"  height=\"234\" width=\"769\" alt=\"\" />\n      <figcaption>Cuando el led superior de una columna está iiluminado es porque el número es mayor que 5, y es calculado como 6 = 5+1, 7=5+2, 9=5+4 </figcaption>\n    </figure>\n\n    <h3 id=\"representar-cualquier-nmero-entre-0-y-99000\">\n      Representar cualquier número entre 0 y 99.000\n    </h3>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/10/5.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/10/responsive/5-xs.png 300w ,https://enteropositivo.github.io/media/posts/10/responsive/5-sm.png 480w ,https://enteropositivo.github.io/media/posts/10/responsive/5-md.png 768w\"  height=\"232\" width=\"767\" alt=\"\" />\n      <figcaption>Siguiendo los pasos anteriores podemos representar cualquier número entre 0 y 99.999 en un mismo display de 5x5</figcaption>\n    </figure>\n\n    <h2 id=\"instalar-extensin-en-makecode\">\n      Instalar extensión en Makecode\n    </h2>\n\n  <p>\n    En un proyecto de <a href=\"https://makecode.microbit.org/\" target=\"_blank\">https://makecode.microbit.org/</a> accedemos a <em>Advanced / Extensions</em> y añadimos la siguiente URL en el cuadro de búsqueda:<br><br><strong><a href=\"https://github.com/enteropositivo/pxt-number100k\">https://github.com/enteropositivo/pxt-number100k</a></strong><br>\n  </p>\n\n  <p>\n    Y ya podemos usar el bloque <strong><em>\"show number 100k\"</em></strong> en nuestros proyectos:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/10/microbit-makecode.PNG\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/10/responsive/microbit-makecode-xs.PNG 300w ,https://enteropositivo.github.io/media/posts/10/responsive/microbit-makecode-sm.PNG 480w ,https://enteropositivo.github.io/media/posts/10/responsive/microbit-makecode-md.PNG 768w\"  height=\"834\" width=\"1028\" alt=\"\" />\n      \n    </figure>",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
                   "mis trabajos",
                   "micro:bit "
            ],
            "date_published": "2022-06-17T12:21:10+02:00",
            "date_modified": "2022-06-17T12:49:11+02:00"
        },
        {
            "id": "https://enteropositivo.github.io/programar-raspberry-pi-pico-con-rust/",
            "url": "https://enteropositivo.github.io/programar-raspberry-pi-pico-con-rust/",
            "title": "Programar Raspberry Pi Pico con Rust",
            "summary": "Requisitos iniciales Si todavía no has instalado Rust puedes hacerlo siguiendo los pasos de aquí Raspberry Pi Pico (o cualquier otra placa con chip RP2040)&hellip;",
            "content_html": "\n    <h2 id=\"requisitos-iniciales\">\n      Requisitos iniciales\n    </h2>\n\n  <p>\n    Si todavía no has instalado Rust puedes hacerlo siguiendo los pasos de <a href=\"https://enteropositivo.github.io/programar-en-rust-en-visual-studio-code/\">aquí</a>\n  </p>\n\n    <h2 id=\"instalar-el-compiladornbspbr\">\n      Instalar el compilador&nbsp;<br>\n    </h2>\n\n  <p>\n    Raspberry Pi Pico (o cualquier otra  placa con chip <strong>RP2040</strong>) necesita instalar un compilador específico para esa arquitectura\n  </p>\n\n  <p>\n    Abre la línea de comandos y ejecuta lo siguiente:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>rustup target install thumbv6m-none-eabi\ncargo install flip-link\ncargo install elf2uf2-rs --locked</code></pre>\n\n    <h2 id=\"descargar-la-plantilla-bsica\">\n      Descargar la plantilla básica\n    </h2>\n\n  <p>\n    La siguiente plantilla tiene la configuración necesaria con un ejemplo sencillo de <strong>blink</strong>&nbsp;\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>git clone https://github.com/enteropositivo/rust-raspberry-pi-pico-template</code></pre>\n\n    <h2 id=\"probando-el-cdigo-en-la-placa\">\n      Probando el código en la placa\n    </h2>\n\n  <p>\n    Conecta la Raspberry Pi Pico al USB mientras pulsas el botón de <strong>reset </strong>de la misma y carga el programa de ejemplo de la plantilla\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>cd rust-raspberry-pi-pico-template\ncargo run --release\n</code></pre>\n\n    <h2 id=\"conocer-el-tamao-real-en-flash\">\n      Conocer el tamaño real en Flash\n    </h2>\n\n  <p>\n    Si queremos saber cuánta memoria flash o memoria RAM se va a necesitar para nuestro programa, tenemos que ejecutar el comando \"cargo size\" y previamente tenemos que las siguientes herramientas:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>cargo install cargo-binutils\nrustup component add llvm-tools-preview</code></pre>\n\n  <p>\n    Y ya podremos consultar el tamaño real con el siguiente comando:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>cargo size -- -A</code></pre>\n\n  <p>\n    Nos mostrará una tabla de varias secciones con sus tamaños en bytes:\n  </p>\n\n  <ul>\n    <li><strong>El tamaño en FLASH se calcula con : </strong>.vector-table + .text + .rodata</li><li><strong>El tamaño en RAM:</strong>&nbsp; .data + .bss</li>\n  </ul>\n\n  <p>\n    \n  </p>",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
                   "rust",
                   "raspberry pi",
                   "Blog"
            ],
            "date_published": "2022-06-14T09:46:43+02:00",
            "date_modified": "2022-06-17T12:02:21+02:00"
        },
        {
            "id": "https://enteropositivo.github.io/programar-en-rust-en-visual-studio-code/",
            "url": "https://enteropositivo.github.io/programar-en-rust-en-visual-studio-code/",
            "title": "Primeros pasos con Rust en Visual Studio Code",
            "summary": "Qué es Rust Rust es un lenguaje de programación multiplataforma y multidispositivo que se presenta como alternativa segura a los lenguajes de software de sistemas&hellip;",
            "content_html": "\n    <h2 id=\"qu-es-rust\">\n      Qué es Rust\n    </h2>\n\n  <p>\n    <strong>Rust </strong>es un lenguaje de programación multiplataforma y multidispositivo que se presenta como alternativa segura a los lenguajes de software de sistemas existentes como C y C++. <br><br>A diferencia de C y C++, Rust garantiza la seguridad de la memoria y evita muchos de los errores relacionados con el uso incorrecto de la memoria que podría encontrar en C y C++\n  </p>\n\n    <blockquote class=\"blockquote\">\n      Es un lenguaje con un futuro realmente prometedor\n    </blockquote>\n\n    <h2 id=\"preparando-el-entorno-de-desarrollo\">\n      Preparando el entorno de desarrollo\n    </h2>\n\n    <figure class=\"post__image post__image--wide\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/8/R.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/8/responsive/R-xs.png 300w ,https://enteropositivo.github.io/media/posts/8/responsive/R-sm.png 480w ,https://enteropositivo.github.io/media/posts/8/responsive/R-md.png 768w\"  height=\"845\" width=\"1420\" alt=\"\" />\n      \n    </figure>\n\n    <h3 id=\"instalar-vscode\">\n      Instalar VSCode\n    </h3>\n\n  <p>\n    Si todavía no tienes en entorno de desarrollo Visual Studio Code, puedes descargarlo desde el siguiente enlace:\n  </p>\n\n  <p>\n    <a href=\"https://code.visualstudio.com/Download\">https://code.visualstudio.com/Download</a>\n  </p>\n\n    <h3 id=\"instalar-rust\">\n      Instalar Rust\n    </h3>\n\n  <p>\n    Accede al siguiente enlace y descarga el instalador\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <a href=\"https://www.rust-lang.org/tools/install\" target=\"_blank\">\n        <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/8/Captura.PNG\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/8/responsive/Captura-xs.PNG 300w ,https://enteropositivo.github.io/media/posts/8/responsive/Captura-sm.PNG 480w ,https://enteropositivo.github.io/media/posts/8/responsive/Captura-md.PNG 768w\"  height=\"869\" width=\"1306\" alt=\"\" />\n      </a>\n      \n    </figure>\n\n  <p>\n    <a href=\"https://www.rust-lang.org/tools/install\">https://www.rust-lang.org/tools/install</a><br><br>También deberás instalar las herramientas de desarrollo de Visual Studio (si no las teníamos ya instaladas) que las puedes descargar desde el siguiente enlace:<br><br><a href=\"https://visualstudio.microsoft.com/visual-cpp-build-tools/\">https://visualstudio.microsoft.com/visual-cpp-build-tools/</a><br><br>\n  </p>\n\n    <h3 id=\"extensiones-recomendadas-para-vscode\">\n      Extensiones recomendadas para VSCode\n    </h3>\n\n  <p>\n    <strong>Rust<br></strong>Resaltado de sintaxis, autocompletado, y más ...<br><a href=\"https://marketplace.visualstudio.com/items?itemName=rust-lang.rust\">https://marketplace.visualstudio.com/items?itemName=rust-lang.rust</a><br><br><strong>CodeLLDB</strong> <br>Para poder depurar el código rust desde visual studio code<br><a href=\"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb\">https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb</a><br><br><strong>Rust Analyzer</strong><br>Sirve de gran ayuda al ecribir código ya que nos mostrará posibles errores que estamos cometiendo al programar<br><a href=\"https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer\" target=\"_blank\">https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer</a><br><br>\n  </p>\n\n    <h2 id=\"mi-primer-hola-mundo-en-rust\">\n      Mi primer \"hola mundo\" en Rust\n    </h2>\n\n    <h3 id=\"crear-un-proyecto-nuevo-con-la-herramienta-cargo\">\n      Crear un proyecto nuevo con la herramienta \"Cargo\"\n    </h3>\n\n  <p>\n    <strong>Cargo </strong>es una herramienta de línea de comandos que sirve como administrador de paquetes (dependencias del proyecto) y otras muchas utilidades como crear nuevos proyectos en rust o compilar el proyecto creado\n  </p>\n\n  <p>\n    Vamos a crear un nuevo proyecto con Cargo,&nbsp; para ello abrimos la línea de comandos y escribimos lo siguiente\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>cargo new hola-mundo --bin</code></pre>\n\n  <p>\n    <strong>hola-mund</strong><strong>o</strong> es el nombre que damos a nuestro primer proyecto&nbsp; y&nbsp; el parámetro <em><strong>--bin</strong></em> indica que queremos crear un programa ejecutable ( si quisiéramos crear una librería habría que usar&nbsp;<em><strong> --lib</strong></em> )\n  </p>\n\n    <h3 id=\"ejecutar-el-programa-desde-la-lnea-de-comandos\">\n      Ejecutar el programa desde la línea de comandos\n    </h3>\n\n  <p>\n    Con el comando anterior se ha creado un nuevo directorio con el nombre del proyecto \"hola-mundo\"\n  </p>\n\n  <p>\n    Podemos&nbsp; compilar y ejecutar nuestro proyecto con el siguiente comando:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>cd hola-mundo\ncargo run\n\n&gt;&gt; Hola, mundo!</code></pre>\n\n  <p>\n    - Pulsamos <strong>F5 </strong>para ejecutar<br><br><em><strong>Nota</strong></em>: La primera vez que lo ejecutamos, VSCode&nbsp; nos preguntará si queremos crear un archivo de configuración y otro de ejecución,&nbsp; le decimos que si y veremos nuestro código ejecutándose por el terminal.\n  </p>\n\n  <p>\n    \n  </p>\n\n  <p>\n    \n  </p>",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
                   "rust",
                   "Blog"
            ],
            "date_published": "2022-06-03T10:14:26+02:00",
            "date_modified": "2022-06-16T12:46:56+02:00"
        },
        {
            "id": "https://enteropositivo.github.io/compartir-carpetas-en-raspberry-pi/",
            "url": "https://enteropositivo.github.io/compartir-carpetas-en-raspberry-pi/",
            "title": "Compartir carpetas en Raspberry Pi",
            "summary": "Cómo compartir carpetas de&nbsp;Raspberry Pi (o similar) con nuestra red interna para poder enviar archivos o muy útil también cuando estamos programando algún script en&hellip;",
            "content_html": "\n  <p>\n    Cómo compartir carpetas de&nbsp;<strong>Raspberry Pi</strong> (o similar) con nuestra red interna para poder enviar archivos o muy útil también cuando estamos programando algún script en un host diferente o desde <strong>Windows </strong>y queremos probarlo en nuestra Raspberry.<br><br>\n  </p>\n\n    <h2 id=\"instalar-samba\">\n      Instalar Samba\n    </h2>\n\n  <p>\n    Se recomienda previamente actualizar los paquetes y el sistema\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo apt-get update\nsudo apt-get upgrade</code></pre>\n\n  <p>\n    Instalamos samba<br>\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo apt-get install samba</code></pre>\n\n    <h2 id=\"carperta-compartida\">\n      Carperta compartida\n    </h2>\n\n  <p>\n    Creamos la carpeta que vamos a compartir en nuestra red y establecemos todos los privilegios de acceso\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>mkdir /home/pi/shared_folder\nsudo chmod -R 777 /home/pi/shared_folder</code></pre>\n\n    <h2 id=\"configurar-samba\">\n      Configurar Samba\n    </h2>\n\n  <p>\n    Ahora creamos el recurso compartido editando el fichero de configuración de Samba\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo nano /etc/samba/smb.conf</code></pre>\n\n  <p>\n    Nos aseguramos de que estamos en el mismo grupo de trabajo que nuestro PC escribiendo lo siguiente<br>\n  </p>\n<pre class=\"line-numbers  language-apacheconf\"><code>workgroup = WORKGROUP\nwins support = yes</code></pre>\n\n  <p>\n    Ahora en la parte inferior del archivo escribimos la siguiente información de la carpeta que queremos compartir\n  </p>\n<pre class=\"line-numbers  language-apacheconf\"><code> [Shared]\n   comment = A Shared Folder\n   path = /home/pi/shared_folder\n   browsable = yes\n   guest ok = yes\n   writable = yes</code></pre>\n\n  <p>\n    Una vez editado, pulsamos ctrl+x para guardar los cambios&nbsp;\n  </p>\n\n    <h2 id=\"reiniciar-samba\">\n      Reiniciar Samba\n    </h2>\n<pre class=\"line-numbers  language-bash\"><code>sudo systemctl restart smbd.service</code></pre>\n\n  <p>\n    FIN!&nbsp; Ya podemos acceder a nuestra carpeta compartida&nbsp; &nbsp;<em><strong>\\\\raspberrypi.local\\shared_folder</strong></em>\n  </p>\n\n  <p>\n    &nbsp;\n  </p>",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
                   "raspberry pi",
                   "Blog"
            ],
            "date_published": "2022-06-03T09:33:33+02:00",
            "date_modified": "2022-06-14T11:51:41+02:00"
        },
        {
            "id": "https://enteropositivo.github.io/entorno-de-desarrollo-de-aplicaciones-para-callcenters/",
            "url": "https://enteropositivo.github.io/entorno-de-desarrollo-de-aplicaciones-para-callcenters/",
            "title": "Entorno de desarrollo visual de conversaciones telefónicas",
            "summary": "Descripción del proyecto Proyecto que desarrollé en C# usando el entorno de IDE OpenSource SharpDevelop El objetivo era crear entorno de desarrollo para programar de&hellip;",
            "content_html": "\n    <h2 id=\"descripcin-del-proyecto\">\n      Descripción del proyecto\n    </h2>\n\n  <p>\n    Proyecto que desarrollé en <strong>C# </strong>usando el entorno de IDE <strong>OpenSource </strong>SharpDevelop\n  </p>\n\n  <p>\n    El objetivo era crear entorno de desarrollo para <strong>programar de forma visual aplicaciones&nbsp; teléfonicas</strong> que siguieran el flujo de posibles conversaciones de los usuarios (para call-centers)\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/4/proyecto_cargado.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/4/responsive/proyecto_cargado-xs.png 300w ,https://enteropositivo.github.io/media/posts/4/responsive/proyecto_cargado-sm.png 480w ,https://enteropositivo.github.io/media/posts/4/responsive/proyecto_cargado-md.png 768w\"  height=\"628\" width=\"707\" alt=\"\" />\n      \n    </figure>\n\n    <h2 id=\"partes-de-proyecto\">\n      Partes de proyecto\n    </h2>\n\n  <p>\n    Los puntos críticos para desarrollar esta aplicación desde cero fueron <br>los siguientes.\n  </p>\n\n    <h3 id=\"diseo-de-una-interfaz-amigable\">\n      Diseño de una Interfaz amigable\n    </h3>\n\n  <p>\n    Decidí crear una interfaz muy típica de entornos de desarrollo con: <br>&nbsp;- paneles acoplables por el usuario<br>&nbsp;- barra de herramientas&nbsp;<br>&nbsp;- menú de acciones<br>&nbsp;- área de trabajo<br><br>\n  </p>\n\n    <h3 id=\"rea-de-trabajo\">\n      Área de trabajo\n    </h3>\n\n  <p>\n    Tal vez la más complicada ya que tuve que programar el comportamiento de los bloques que se arrastraban a este área, calcular cómo se dibujaría cada elemento y calcular cómo se colocarían las flechas que unen los bloques para formar un flujo de conversación<br>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/4/toolbar.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/4/responsive/toolbar-xs.png 300w ,https://enteropositivo.github.io/media/posts/4/responsive/toolbar-sm.png 480w ,https://enteropositivo.github.io/media/posts/4/responsive/toolbar-md.png 768w\"  height=\"628\" width=\"707\" alt=\"\" />\n      \n    </figure>\n\n    <h3 id=\"subrutinas-y-variables\">\n      Subrutinas y Variables\n    </h3>\n\n  <p>\n    Para facilitar la programación de la conversación,&nbsp; el programa también era capaz de generar subrutinas o bloques personalizados que a su vez contenían otros flujos internos.&nbsp; Una especie de programación orientada a objetos.<br><br>Y un sistema de variables del sistema o personalizables por el usuario añadiendo un intérprete de JavaScript para poder realizar funciones más complejas\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/4/config_vars.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/4/responsive/config_vars-xs.png 300w ,https://enteropositivo.github.io/media/posts/4/responsive/config_vars-sm.png 480w ,https://enteropositivo.github.io/media/posts/4/responsive/config_vars-md.png 768w\"  height=\"628\" width=\"707\" alt=\"\" />\n      \n    </figure>\n\n    <h3 id=\"motor-de-ejecucin\">\n      Motor de ejecución\n    </h3>\n\n  <p>\n    Era el corazón de la aplicación donde se tenía que interpretar el flujo compuesto por todos los bloque emplazados por el usuario y realizar las acciones correspondientes.\n  </p>\n\n  <p>\n    También integraba un Text-to-Speech para poder hablar al usuario y/o repetir entradas de números que el usuario tecleaba en su teléfono.\n  </p>\n\n  <p>\n    Todo ello con una gestión interna para avisar al usuario de posibles errores.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/4/control_errores.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/4/responsive/control_errores-xs.png 300w ,https://enteropositivo.github.io/media/posts/4/responsive/control_errores-sm.png 480w ,https://enteropositivo.github.io/media/posts/4/responsive/control_errores-md.png 768w\"  height=\"628\" width=\"707\" alt=\"\" />\n      \n    </figure>\n\n    <h2 id=\"resumen\">\n      Resumen\n    </h2>\n\n  <p>\n    Fue un proyecto muy interesante que requería la unión de muchos conocimientos técnicos:<br>\n  </p>\n\n  <ul>\n    <li>Gran capacidad de análisis de los requisitos del cliente</li><li>Estructurar correctamente el proyecto</li><li>Idear un diseño bonito pero a la vez usable de la aplicación</li><li>Organizar la estructura interna del proyecto en módulos</li><li>Programar cada módulo para que conseguir el resultado final</li>\n  </ul>",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
                   "mis trabajos",
                   "CSharp"
            ],
            "date_published": "2022-05-07T20:23:10+02:00",
            "date_modified": "2022-06-17T10:02:32+02:00"
        },
        {
            "id": "https://enteropositivo.github.io/principal/",
            "url": "https://enteropositivo.github.io/principal/",
            "title": "Inicio",
            "summary": "Me I am an electronic engineer and a developer with over 20 years of expertise working with various languages and platforms. I have served as&hellip;",
            "content_html": "<h2>Me </h2>\n<p>I am an electronic engineer and a developer with over 20 years of expertise working with various languages and platforms. I have served as a project manager for large software projects and collaborate as a freelancer with several companies.</p>\n<h2>Programming languages</h2>\n<p>C# · C++ · Python · JavaScript · ActionScript · Lua · Rust · PHP</p>\n<h2>Skills</h2>\n<ul>\n<li>Web development</li>\n<li>Desktop software </li>\n<li>Backend/Frontend</li>\n<li>Game development</li>\n<li>Embedded systems (Arduino, ESP32, STM32, Raspberry Pi, ...)</li>\n<li>Conceptualization of solutions for large projects</li>\n</ul>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
            ],
            "date_published": "2022-05-06T18:38:03+02:00",
            "date_modified": "2023-07-25T08:18:56+02:00"
        },
        {
            "id": "https://enteropositivo.github.io/libreria-csharp-para-generar-archivos-swf-de-flash/",
            "url": "https://enteropositivo.github.io/libreria-csharp-para-generar-archivos-swf-de-flash/",
            "title": "Librería en C# para generar archivos swf de flash",
            "summary": "Descripción del Proyecto SwfdotNet es una librería que programé en C# en el 2005 para crear dinámicamente películas swf de flash desde .NET&nbsp;tanto en Windows&hellip;",
            "content_html": "\n    <h2 id=\"descripcin-del-proyecto\">\n      Descripción del Proyecto\n    </h2>\n\n  <p>\n    SwfdotNet es una librería que programé en <strong>C#</strong> en el 2005 para crear dinámicamente películas swf de flash desde .NET&nbsp;tanto en Windows como en Linux<br>\n<br>Está programada estudiando las especificaciones del formato SWF de Macromedia, por lo que las películas generadas eran compatibles con cualquier reproductor de swf de version 5 en adelante.\n  </p>\n\n  <p>\n    <strong><em></em></strong><strong><em>GitHub:</em></strong>&nbsp;<a href=\"https://github.com/enteropositivo/swf-dotnet\" target=\"_blank\">https://github.com/enteropositivo/swf-dotnet</a><a href=\"https://github.com/enteropositivo/swf-dotnet\" target=\"_blank\"></a>\n  </p>\n\n  <p>\n    \n  </p>\n\n    <h2 id=\"algunos-ejemplos-de-uso\">\n      Algunos ejemplos de uso\n    </h2>\n\n  <p>\n    A continuación muestro algunos ejemplos seleccionados de lo que se puede hacer con esta librería.\n  </p>\n\n    <h3 id=\"rectngulo-con-relleno-degradado\">\n      Rectángulo con relleno degradado\n    </h3>\n<pre class=\"line-numbers  language-csharp\"><code>Rectangle Rct = new Rectangle(6000, 2000, 400);      //- ancho, alto, radio\n            \nRct.LineStyle =new LineStyle(new RGB(255,153,0), 4); //-Estilo de linea (grosor 4)\n            \n//-Creación del gradiente, permite varios colores\nGradient G = new Gradient(GradientType.LinearGradient,-45); //-Lo haremos lineal inclinado 45º\nG.AddColor(new RGB(255,255,224), 0);                        //-Primer color en posición 0\nG.AddColor(new RGB(255,204,0), 255);                        //-Segundo color en posición 255\n                        \nRct.FillStyle = new FillStyle(G);     //-Relleno con el gradiente creado\n    \nMovie movie = new Movie(6400, 2400,new RGB(153,153,255));\nmovie.Define(Rct);\nmovie.Frames[1].Add(Rct);             //-Emplazo al rectángulo en el primer fotograma \nmovie.SaveToFile(@\"ejemplo2.swf\");    //-Genero el SWF\n</code></pre>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/3/ejemplo2.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/3/responsive/ejemplo2-xs.png 300w ,https://enteropositivo.github.io/media/posts/3/responsive/ejemplo2-sm.png 480w ,https://enteropositivo.github.io/media/posts/3/responsive/ejemplo2-md.png 768w\"  height=\"117\" width=\"315\" alt=\"\" />\n      \n    </figure>\n<hr class=\"separator separator--dots\" />\n\n    <h3 id=\"cmo-incrustar-imgenes\">\n      Cómo incrustar imágenes\n    </h3>\n<pre class=\"line-numbers  language-csharp\"><code>Rectangle Rct = new Rectangle(2400,    2400, 400);\nRct.LineStyle =new LineStyle(new RGB(255,153,0), 4);\n            \nTagDefineBitsJPEG2 jpeg = new TagDefineBitsJPEG2(\"pin.jpg\");   //-Defino la imagen        \n                                \nRct.FillStyle = new FillStyle(jpeg, BitmapFill.ClippedBitmap); //-Lo relleno con el jpeg\n\nMovie movie = new Movie(4000, 4000,new RGB(153,153,255));\nmovie.FrameRate=12;\n            \nmovie.Define(jpeg);           //- Añadimos la imagen e la Librería de objetos de la película \nmovie.Define(Rct);\n    \nMatrix mx = new Matrix();     //-Matriz de transformación para manipular objetos\nmx.Tanslate(1400,400);        //-Traslado el objeto \nmx.Rotate(-30);               //-Lo roto -30º\n            \nmovie.Frames[1].Add(Rct, mx); //-Lo añado y le aplico la transformacion\n           \nmovie.SaveToFile(@\"ejemplo4.swf\");</code></pre>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/3/ejemplo4.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/3/responsive/ejemplo4-xs.png 300w ,https://enteropositivo.github.io/media/posts/3/responsive/ejemplo4-sm.png 480w ,https://enteropositivo.github.io/media/posts/3/responsive/ejemplo4-md.png 768w\"  height=\"190\" width=\"183\" alt=\"\" />\n      \n    </figure>\n<hr class=\"separator separator--dots\" />\n\n    <h3 id=\"creacin-de-una-forma-vectorial-personalizada\">\n      Creación de una forma vectorial personalizada\n    </h3>\n<pre class=\"line-numbers  language-csharp\"><code>Gradient G = new Gradient(GradientType.LinearGradient,-45);\nG.AddColor(new RGB(255,255,255), 0);\nG.AddColor(new RGB(153,0,0), 255);\n        \nLineTool shap = new LineTool(); //-Objeto de forma personalizada\n\n//- Le añado el estilo de línea y relleno\nshap.LineStyles.Add(new LineStyle(new RGB(91,0,0),0));\nshap.FillStyles.Add(new FillStyle(G));\n            \n//- Establezco el estilo de linea y de relleno anteriores    \n//  Nota: Por defecto ya vienen con un estilo por tanto asigno estilos con índice 2 en la lista de estilos\nshap.SetStyle(2,2);            \n            \nshap.HorizontalTo(6000);    //- Horizontal 6000 Twips a la derecha\nshap.LineTo(200,-200);      //- Linea hasta la posición x=200 y=-200\nshap.HorizontalTo(600);     //- Una pequeña horizontal 600 Twips a la derecha\nshap.VerticalTo(3200);      //- 3200 Twips hacia abajo\n            \nshap.CurveTo(-800,0,0,800); //- Curva indicada por 3 puntos(el último trazado y estos 2 nuevos) \n            \nshap.HorizontalTo(-5800);   //-Horizontal 5800 hacia la izquierda\nshap.LineTo(-200,-200);     //- una pequeñaa muesca en la esquina\nshap.VerticalTo(-3600);     //- Y cerramos la forma subiendo hasta el inicio\n            \nMovie movie = new Movie(7200, 4600,new RGB(153,153,255));\nmovie.Define(shap);\n            \nmovie.Frames[1].Add(shap);    \nmovie.SaveToFile(@\"ejemplo5.swf\");</code></pre>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/3/ejemplo5.png\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://enteropositivo.github.io/media/posts/3/responsive/ejemplo5-xs.png 300w ,https://enteropositivo.github.io/media/posts/3/responsive/ejemplo5-sm.png 480w ,https://enteropositivo.github.io/media/posts/3/responsive/ejemplo5-md.png 768w\"  height=\"218\" width=\"352\" alt=\"\" />\n      \n    </figure>\n<hr class=\"separator separator--dots\" />\n\n    <h3 id=\"botn-con-3-estados-diferentes-reposo-hover-y-clickbr\">\n      Botón con 3 estados diferentes (reposo, hover y click)<br>\n    </h3>\n<pre class=\"line-numbers  language-csharp\"><code>Gradient G = new Gradient(GradientType.LinearGradient,-45);\nG.AddColor(new RGB(255,255,255), 0);\nG.AddColor(new RGB(20,0,125), 255);\n        \n//- Estado del botón en reposo\nRectangle rct = new Rectangle(2000,2000,400);\nrct.LineStyle =new LineStyle(new RGB(0,50,100),4);\nrct.FillStyle= new FillStyle(G);        //- Relleno con el gradiente creado\n            \n//- Estado del botón en Hover\nRectangle rctOn = new Rectangle(2000,2000,400);\nrctOn.LineStyle =new LineStyle(new RGB(238,221,34),4);\nrctOn.FillStyle= new FillStyle(G);        //- Relleno con el gradiente creado\n            \n//- Estado del botón en Mouse Down\nRectangle rctPush = new Rectangle(2000,2000,400);\nrctPush.LineStyle =new LineStyle(new RGB(238,221,34),4);\nrctPush.FillStyle= new FillStyle(new RGB(238,221,34));\n            \n//- Creo el botón y le asigno los estados creados\nTagDefineButton btn = new TagDefineButton();        \nbtn.Up=rct;\nbtn.Over=rctOn;\nbtn.Hit=rct;\nbtn.Down=rctPush;\n            \nMovie movie = new Movie(2400, 2400,new RGB(153,153,255));\n            \nmovie.Define(rct);        //- Como siempre en flash, cada elemento debe definirse en la libreria\nmovie.Define(rctOn);\nmovie.Define(rctPush);\nmovie.Define(btn);\n            \nmovie.Frames[1].Add(btn);    \nmovie.SaveToFile(@\"ejemplo8.swf\");\n\n</code></pre>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/3/ejemplo8.gif\" height=\"157\" width=\"272\" alt=\"\" />\n      \n    </figure>\n<hr class=\"separator separator--dots\" />\n\n    <h3 id=\"ventana-con-un-botn-para-abrir-o-cerrarla\">\n      Ventana con un botón para abrir o cerrarla\n    </h3>\n\n  <p>\n    El siguiente ejemplo es muy completo ya que también programe la librería para que aceptase código de <strong>ActionScript </strong>y así poder crear objetos dinámicos o que respondan a eventos.<br>\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>Movie movie = new Movie(6900, 4200,new RGB(255,255,255));\nmovie.FrameRate=1;\n\nGradient G = new Gradient(GradientType.LinearGradient,-45);\nG.AddColor(new RGB(255,255,255), 0);\nG.AddColor(new RGB(153,0,0), 255);\n        \n//- Forma de la venta cerrada \nLineTool Cerrada = new LineTool();    \nCerrada.LineStyles.Add(new LineStyle(new RGB(100,100,100),0));\nCerrada.FillStyles.Add(new FillStyle(G));\n\nCerrada.SetStyle(2,2);        //-Asigno los nuevos estilos añadidos    \nCerrada.HorizontalTo(6000);\nCerrada.LineTo(200,-200);\nCerrada.HorizontalTo(600);\nCerrada.VerticalTo(800);\nCerrada.HorizontalTo(-6600);\nCerrada.LineTo(-200,-200);\nCerrada.VerticalTo(-400);\n\n\nLineTool Abierta = new LineTool();\nAbierta.LineStyles.Add(new LineStyle(new RGB(100,100,100),0));\nAbierta.FillStyles.Add(new FillStyle(G));\n\nAbierta.SetStyle(2,2);        //-Asigno los nuevos estilos añadidos\nAbierta.HorizontalTo(6000);\nAbierta.LineTo(200,-200);\nAbierta.HorizontalTo(600);\nAbierta.VerticalTo(3200);\nAbierta.CurveTo(-800,0,0,800);\nAbierta.HorizontalTo(-5800);\nAbierta.LineTo(-200,-200);\nAbierta.VerticalTo(-3600);\n    \n\nRectangle rct = new Rectangle(200,200,2);        //- Botón en reposo\nrct.LineStyle =new LineStyle(new RGB(255,255,255),0);\nrct.FillStyle= new FillStyle(G);\n\nRectangle rctOn = new Rectangle(200,200,2);      //- Botón Activo\nrctOn.LineStyle =new LineStyle(new RGB(238,221,34),2);\nrctOn.FillStyle= new FillStyle(G);\n\nTagDefineButton boton = new TagDefineButton();\nboton.Up=rct;\nboton.Over=rctOn;\nboton.Hit=rct;\nboton.Down=rct;\n        \n//- Creo un nuevo movie clip que representa la Ventana\nDefineSprite ventana = new DefineSprite();\n\nventana.Frames[1].Add(Cerrada);\nventana.Frames[1].Script.Stop();    //-Stop() en este frame para evitar un bucle\nventana.Frames[2].Remove(Cerrada);  //-En el 2º frame solo debe estar la ventana Abierta\nventana.Frames[2].Add(Abierta);\n\n//- ActionScript -&gt;   var open;\nventana.Frames[1].Script.Push(\"open\");  //-Meto en la pila el nomrbre de la variable\nventana.Frames[1].Script.DefineVar();   //-Creo una variable con lo que tenga en la pila\n\n//- ActionScript -&gt;   open=false;\nventana.Frames[1].Script.Push(\"open\");\nventana.Frames[1].Script.Push(0);\nventana.Frames[1].Script.SetVar();\n\nboton.Script.TellTarget(\"WINDOW\");    //-Llamo al simbolo por el nombre \n\n//- ActionScript -&gt;   open=!open;     Para alternar x entre True y False\nboton.Script.Push(\"open\");    //-  Añado a la pila X Para cuando llame a SetVar\nboton.Script.Push(\"open\");    //-     Añado a la pila X para recoger el valor de x con GetVar  \nboton.Script.GetVar();        //-  Saco de la pila x y GetVar mete su valor correspondiente\nboton.Script.Not();           //-  Niego el valor que haya en la pila (el obtenido con GetVar)\nboton.Script.SetVar();        //-  Y se lo asigno a la variable que hubiera en la pila (la 1ª x)\n\n//-    ActionScript -&gt;   if(open==true)\nboton.Script.Push(1);        //-  Para comparar con Equal\nboton.Script.Push(\"open\");   //- Quiero obtener el valor de la variable x\nboton.Script.GetVar();       //- Obtengo el valor\nboton.Script.Equal();        //- Para usar con la instruccion IF\nboton.Script.If();           //- Tengo en la pila un valor verdadero??\nboton.Script.gotoAndStop(2);  //- Me muevo al frame del sprite que tenía la ventana abierta\nboton.Script.Else();\nboton.Script.gotoAndStop(1);  //- Cierro la ventana\nboton.Script.EndIf();\n    \n//- Librerá de simbolos de la película    \nmovie.Define(Abierta);\nmovie.Define(Cerrada);\nmovie.Define(rct);\nmovie.Define(rctOn);\nmovie.Define(boton);\nmovie.Define(ventana);\n\nmovie.Frames[1].Add(ventana, \"WINDOW\");    //- Añado el Sprite y le asigno el Nombre de la Instancia\nMatrix mx = new Matrix();\nmx.Tanslate(6200,0);\nmovie.Frames[1].Add(boton,mx);             //- Añado el botón en la posición indicada por mx\n\nmovie.SaveToFile(@\"ejemplo9.swf\");\n</code></pre>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://enteropositivo.github.io/media/posts/3/ejemplo9.gif\" height=\"210\" width=\"355\" alt=\"\" />\n      \n    </figure>\n<hr class=\"separator separator--dots\" />\n\n    <h3 id=\"generar-swf-desde-aspnet\">\n      Generar SWF desde ASP.NET\n    </h3>\n<pre class=\"line-numbers  language-csharp\"><code>&lt;%@ Page Language=\"C#\" %&gt;\n&lt;%@ Register TagPrefix=\"SDN\" Namespace=\"SwfdotNet\" Assembly=\"SwfdotNet\" %&gt;\n&lt;%@ Register TagPrefix=\"SDNFB\" Namespace=\"SwfdotNet.Format.BasicTypes\" Assembly=\"SwfdotNet\" %&gt;\n&lt;%@ Register TagPrefix=\"SDNFS\" Namespace=\"SwfdotNet.Format.Shapes\" Assembly=\"SwfdotNet\" %&gt;\n&lt;%@ Register TagPrefix=\"SDNFT\" Namespace=\"SwfdotNet.Format.Tags\" Assembly=\"SwfdotNet\" %&gt;\n&lt;%@ Register TagPrefix=\"SDNFU\" Namespace=\"SwfdotNet.Format.UtilTypes\" Assembly=\"SwfdotNet\" %&gt;\n&lt;%@ Register TagPrefix=\"SDNS\" Namespace=\"SwfdotNet.Shapes\" Assembly=\"SwfdotNet\" %&gt;\n&lt;%\n\n\n//    Uso de gradientes para relleno\nRectangle Rct = new Rectangle(6000,    2000, 400);\n\nRct.LineStyle =new LineStyle(new RGB(255,153,0), 4);\n\n//-Creación del gradiente, permite varios colores\nGradient G = new Gradient(GradientType.LinearGradient,-45);     //-Lo haremos lineal inclinado 45º\nG.AddColor(new RGB(255,255,224), 0);                            //-Primer color en posición 0\nG.AddColor(new RGB(255,204,0), 255);                            //-Segundo color en posicón 255\n\n//-Relleno con el gradiente creado\nRct.FillStyle = new FillStyle(G);         \n\nMovie movie = new Movie(7000, 4000,new RGB(153,153,255));\nmovie.Define(Rct);\nmovie.Frames[1].Add(Rct);    \n\nResponse.Clear(); \n\n//- Establecemos los tipos MIME para que el navegador sepa que es un swf\nResponse.AddHeader( \"Content-Type\", \"application/x-shockwave-flash\");\nResponse.AddHeader( \"Content-Disposition\", \"inline;filename=ejemplo7.swf\");\n\nResponse.BinaryWrite(movie.GetBytes);    // &lt;-- Lanzamos el contenido del swf al navegador !!\n \n\n//---- Archivo ejemplo7.aspx ----\\\\\n%&gt;</code></pre>",
            "author": {
                "name": "Entero Positivo"
            },
            "tags": [
                   "mis trabajos",
                   "CSharp"
            ],
            "date_published": "2022-02-09T10:52:00+01:00",
            "date_modified": "2022-06-15T12:29:51+02:00"
        }
    ]
}
